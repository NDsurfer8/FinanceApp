{
  "rules": {
    "users": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid",
        "profile": {
          ".validate": "newData.hasChildren(['uid', 'email', 'displayName', 'createdAt', 'updatedAt'])",
          "uid": {
            ".validate": "newData.val() === auth.uid"
          },
          "email": {
            ".validate": "newData.isString() && newData.val().matches(/^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$/)"
          },
          "displayName": {
            ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 100"
          },
          "createdAt": {
            ".validate": "newData.isNumber() && newData.val() > 0"
          },
          "updatedAt": {
            ".validate": "newData.isNumber() && newData.val() > 0"
          }
        },

        "transactions": {
          "$transactionId": {
            ".validate": "newData.hasChildren(['id', 'description', 'amount', 'type', 'category', 'date', 'userId'])",
            "id": {
              ".validate": "newData.val() === $transactionId"
            },
            "description": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 200"
            },
            "descriptionEncrypted": {
              ".validate": "newData.isString()"
            },
            "amount": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            },
            "amountEncrypted": {
              ".validate": "newData.isString()"
            },
            "type": {
              ".validate": "newData.val() === 'income' || newData.val() === 'expense'"
            },
            "category": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 50"
            },
            "categoryEncrypted": {
              ".validate": "newData.isString()"
            },
            "date": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            },
            "userId": {
              ".validate": "newData.val() === auth.uid"
            },
            "createdAt": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            },
            "recurringTransactionId": {
              ".validate": "newData.isString() && newData.val().length > 0"
            },
            "isProjected": {
              ".validate": "newData.isBoolean()"
            }
          }
        },

        "assets": {
          "$assetId": {
            ".validate": "newData.hasChildren(['id', 'name', 'balance', 'type', 'userId'])",
            "id": {
              ".validate": "newData.val() === $assetId"
            },
            "name": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 100"
            },
            "nameEncrypted": {
              ".validate": "newData.isString()"
            },
            "balance": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            "balanceEncrypted": {
              ".validate": "newData.isString()"
            },
            "type": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 50"
            },
            "category": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 50 || newData.val() == null"
            },
            "source": {
              ".validate": "newData.val() === 'plaid' || newData.val() === 'manual' || newData.val() == null"
            },
            "plaidAccountId": {
              ".validate": "newData.isString() || newData.val() == null"
            },
            "lastUpdated": {
              ".validate": "newData.isString() || newData.val() == null"
            },
            "isAutoImported": {
              ".validate": "newData.isBoolean() || newData.val() == null"
            },
            "userId": {
              ".validate": "newData.val() === auth.uid"
            }
          }
        },

        "debts": {
          "$debtId": {
            ".validate": "newData.hasChildren(['id', 'name', 'balance', 'userId'])",
            "id": {
              ".validate": "newData.val() === $debtId"
            },
            "name": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 100"
            },
            "nameEncrypted": {
              ".validate": "newData.isString()"
            },
            "balance": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            "balanceEncrypted": {
              ".validate": "newData.isString()"
            },
            "type": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 50 || newData.val() == null"
            },
            "category": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 50 || newData.val() == null"
            },
            "source": {
              ".validate": "newData.val() === 'plaid' || newData.val() === 'manual' || newData.val() == null"
            },
            "plaidAccountId": {
              ".validate": "newData.isString() || newData.val() == null"
            },
            "lastUpdated": {
              ".validate": "newData.isString() || newData.val() == null"
            },
            "isAutoImported": {
              ".validate": "newData.isBoolean() || newData.val() == null"
            },
            "rate": {
              ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 100 || newData.val() == null"
            },
            "rateEncrypted": {
              ".validate": "newData.isString() || newData.val() == null"
            },
            "payment": {
              ".validate": "newData.isNumber() && newData.val() >= 0 || newData.val() == null"
            },
            "paymentEncrypted": {
              ".validate": "newData.isString() || newData.val() == null"
            },
            "userId": {
              ".validate": "newData.val() === auth.uid"
            }
          }
        },

        "goals": {
          "$goalId": {
            ".validate": "newData.hasChildren(['id', 'name', 'targetAmount', 'currentAmount', 'monthlyContribution', 'targetDate', 'category', 'priority', 'userId', 'createdAt', 'updatedAt'])",
            "id": {
              ".validate": "newData.val() === $goalId"
            },
            "name": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 100"
            },
            "nameEncrypted": {
              ".validate": "newData.isString()"
            },
            "targetAmount": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            },
            "targetAmountEncrypted": {
              ".validate": "newData.isString()"
            },
            "currentAmount": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            "currentAmountEncrypted": {
              ".validate": "newData.isString()"
            },
            "monthlyContribution": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            "monthlyContributionEncrypted": {
              ".validate": "newData.isString()"
            },
            "targetDate": {
              ".validate": "newData.isString() && newData.val().length > 0"
            },
            "category": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 50"
            },
            "categoryEncrypted": {
              ".validate": "newData.isString()"
            },
            "priority": {
              ".validate": "newData.val() === 'high' || newData.val() === 'medium' || newData.val() === 'low'"
            },
            "userId": {
              ".validate": "newData.val() === auth.uid"
            },
            "createdAt": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            },
            "updatedAt": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            }
          }
        },

        "emergencyFund": {
          "$emergencyFundId": {
            ".validate": "newData.hasChildren(['id', 'currentBalance', 'targetMonths', 'monthlyContribution', 'userId', 'updatedAt'])",
            "id": {
              ".validate": "newData.val() === $emergencyFundId"
            },
            "currentBalance": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            "currentBalanceEncrypted": {
              ".validate": "newData.isString()"
            },
            "targetMonths": {
              ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 24"
            },
            "targetMonthsEncrypted": {
              ".validate": "newData.isString()"
            },
            "monthlyContribution": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            "monthlyContributionEncrypted": {
              ".validate": "newData.isString()"
            },
            "userId": {
              ".validate": "newData.val() === auth.uid"
            },
            "updatedAt": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            }
          }
        },

        "budgetSettings": {
          "$budgetSettingsId": {
            ".validate": "newData.hasChildren(['id', 'savingsPercentage', 'debtPayoffPercentage', 'userId', 'updatedAt'])",
            "id": {
              ".validate": "newData.val() === $budgetSettingsId"
            },
            "savingsPercentage": {
              ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 100"
            },
            "savingsPercentageEncrypted": {
              ".validate": "newData.isString()"
            },
            "debtPayoffPercentage": {
              ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 100"
            },
            "debtPayoffPercentageEncrypted": {
              ".validate": "newData.isString()"
            },
            "userId": {
              ".validate": "newData.val() === auth.uid"
            },
            "updatedAt": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            }
          }
        },

        "recurringTransactions": {
          "$recurringTransactionId": {
            ".validate": "newData.hasChildren(['id', 'name', 'amount', 'type', 'category', 'frequency', 'startDate', 'isActive', 'userId', 'createdAt', 'updatedAt']) && (!newData.hasChild('endDate') || newData.child('endDate').isNumber())",
            "id": {
              ".validate": "newData.val() === $recurringTransactionId"
            },
            "name": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 100"
            },
            "nameEncrypted": {
              ".validate": "newData.isString()"
            },
            "amount": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            },
            "amountEncrypted": {
              ".validate": "newData.isString()"
            },
            "type": {
              ".validate": "newData.val() === 'income' || newData.val() === 'expense'"
            },
            "category": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 50"
            },
            "categoryEncrypted": {
              ".validate": "newData.isString()"
            },
            "frequency": {
              ".validate": "newData.val() === 'weekly' || newData.val() === 'biweekly' || newData.val() === 'monthly' || newData.val() === 'quarterly' || newData.val() === 'yearly'"
            },
            "startDate": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            },
            "endDate": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            },
            "isActive": {
              ".validate": "newData.isBoolean()"
            },
            "userId": {
              ".validate": "newData.val() === auth.uid"
            },
            "createdAt": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            },
            "updatedAt": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            },
            "lastGeneratedDate": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            },
            "nextDueDate": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            },
            "totalOccurrences": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            "skippedMonths": {
              ".validate": "newData.hasChildren() || newData.val() == null"
            },
            "monthOverrides": {
              ".validate": "newData.hasChildren() || newData.val() == null"
            }
          }
        }
      }
    },

    "sharedGroups": {
      ".read": "auth != null",
      ".write": "auth != null",
      "$groupId": {
        ".read": "auth != null && root.child('sharedGroups').child($groupId).child('members').child(auth.uid).exists()",
        ".write": "auth != null && root.child('sharedGroups').child($groupId).child('members').child(auth.uid).exists()",
        ".validate": "newData.hasChildren(['name', 'type', 'ownerId', 'members', 'settings', 'createdAt', 'updatedAt'])",
        "name": {
          ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 100"
        },
        "description": {
          ".validate": "newData.isString() && newData.val().length <= 500"
        },
        "type": {
          ".validate": "newData.val() === 'couple' || newData.val() === 'family' || newData.val() === 'business' || newData.val() === 'investment'"
        },
        "ownerId": {
          ".validate": "newData.val() === auth.uid"
        },
        "members": {
          "$memberId": {
            ".validate": "newData.hasChildren(['userId', 'displayName', 'email', 'role', 'joinedAt', 'permissions'])",
            "userId": {
              ".validate": "newData.isString() && newData.val().length > 0"
            },
            "displayName": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 100"
            },
            "email": {
              ".validate": "newData.isString() && newData.val().length > 0"
            },
            "role": {
              ".validate": "newData.val() === 'owner' || newData.val() === 'member' || newData.val() === 'viewer'"
            },
            "joinedAt": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            },
            "permissions": {
              ".validate": "newData.hasChildren(['canAddTransactions', 'canEditTransactions', 'canAddAssets', 'canEditAssets', 'canAddDebts', 'canEditDebts', 'canAddGoals', 'canEditGoals', 'canInviteMembers', 'canRemoveMembers', 'canViewAllData'])"
            }
          }
        },
        "settings": {
          ".validate": "newData.hasChildren(['shareTransactions', 'shareAssets', 'shareDebts', 'shareGoals', 'shareBudgetSettings', 'allowMemberInvites', 'requireApprovalForJoining'])"
        },
        "createdAt": {
          ".validate": "newData.isNumber() && newData.val() > 0"
        },
        "updatedAt": {
          ".validate": "newData.isNumber() && newData.val() > 0"
        },

        "plaid_connections": {
          "$itemId": {
            ".read": "auth != null",
            ".write": "auth != null",
            ".validate": "newData.hasChildren(['itemId', 'accessToken', 'institution', 'accounts', 'connectedAt', 'status', 'lastUpdated'])",
            "itemId": {
              ".validate": "newData.isString() && newData.val().length > 0"
            },
            "accessToken": {
              ".validate": "newData.isString() && newData.val().length > 0"
            },
            "accessTokenEncrypted": {
              ".validate": "newData.isString()"
            },
            "institution": {
              ".validate": "newData.hasChildren(['name', 'institution_id'])",
              "name": {
                ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 100"
              },
              "institution_id": {
                ".validate": "newData.isString() && newData.val().length > 0"
              }
            },
            "institutionEncrypted": {
              ".validate": "newData.isString()"
            },
            "accounts": {
              ".validate": "newData.hasChildren() || newData.val() == null || newData.val() == ''"
            },
            "accountsEncrypted": {
              ".validate": "newData.isString()"
            },
            "connectedAt": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            },
            "status": {
              ".validate": "newData.val() === 'connected' || newData.val() === 'disconnected' || newData.val() === 'error'"
            },
            "lastUpdated": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            }
          }
        }
      }
    },

    "invitations": {
      ".read": "auth != null",
      ".write": "auth != null",
      "$invitationId": {
        ".read": "auth != null && (data.child('inviterId').val() === auth.uid || data.child('inviteeEmail').val() === root.child('users').child(auth.uid).child('profile').child('email').val())",
        ".write": "auth != null && newData.child('inviterId').val() === auth.uid",
        ".validate": "newData.hasChildren(['groupId', 'groupName', 'inviterId', 'inviterName', 'inviteeEmail', 'role', 'status', 'expiresAt', 'createdAt'])",
        "groupId": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "groupName": {
          ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 100"
        },
        "inviterId": {
          ".validate": "newData.val() === auth.uid"
        },
        "inviterName": {
          ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 100"
        },
        "inviteeEmail": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "role": {
          ".validate": "newData.val() === 'member' || newData.val() === 'viewer'"
        },
        "status": {
          ".validate": "newData.val() === 'pending' || newData.val() === 'accepted' || newData.val() === 'declined' || newData.val() === 'expired'"
        },
        "expiresAt": {
          ".validate": "newData.isNumber() && newData.val() > 0"
        },
        "createdAt": {
          ".validate": "newData.isNumber() && newData.val() > 0"
        }
      }
    },

    "sharedFinanceData": {
      ".read": "auth != null",
      ".write": "auth != null",
      "$groupId": {
        ".read": "auth != null && root.child('sharedGroups').child($groupId).child('members').child(auth.uid).exists()",
        ".write": "auth != null && root.child('sharedGroups').child($groupId).child('members').child(auth.uid).exists()",
        "members": {
          "$memberId": {
            ".read": "auth != null && root.child('sharedGroups').child($groupId).child('members').child(auth.uid).exists()",
            ".write": "auth != null && $memberId === auth.uid && root.child('sharedGroups').child($groupId).child('members').child(auth.uid).exists()"
          }
        }
      }
    },

    "plaidItems": {
      ".read": "auth != null",
      ".write": "auth != null",
      "$itemId": {
        ".read": "auth != null && data.child('userId').val() === auth.uid",
        ".write": "auth != null && newData.child('userId').val() === auth.uid",
        ".validate": "newData.hasChildren(['itemId', 'userId', 'accessToken', 'status', 'createdAt', 'updatedAt'])",
        "itemId": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "userId": {
          ".validate": "newData.val() === auth.uid"
        },
        "accessToken": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "accessTokenEncrypted": {
          ".validate": "newData.isString()"
        },
        "status": {
          ".validate": "newData.val() === 'good' || newData.val() === 'pending_expiration' || newData.val() === 'item_login_required' || newData.val() === 'pending_disconnect'"
        },
        "institutionId": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "institutionName": {
          ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 100"
        },
        "createdAt": {
          ".validate": "newData.isNumber() && newData.val() > 0"
        },
        "updatedAt": {
          ".validate": "newData.isNumber() && newData.val() > 0"
        }
      }
    },

    "bankData": {
      ".read": "auth != null",
      ".write": "auth != null",
      "$userId": {
        ".read": "$userId === auth.uid",
        ".write": "$userId === auth.uid",
        "accounts": {
          "$accountId": {
            ".validate": "newData.hasChildren(['accountId', 'name', 'type', 'subtype', 'mask', 'userId'])",
            "accountId": {
              ".validate": "newData.isString() && newData.val().length > 0"
            },
            "name": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 100"
            },
            "nameEncrypted": {
              ".validate": "newData.isString()"
            },
            "type": {
              ".validate": "newData.val() === 'depository' || newData.val() === 'credit' || newData.val() === 'loan' || newData.val() === 'investment'"
            },
            "subtype": {
              ".validate": "newData.isString() && newData.val().length > 0"
            },
            "mask": {
              ".validate": "newData.isString() && newData.val().length <= 4"
            },
            "currentBalance": {
              ".validate": "newData.isNumber()"
            },
            "currentBalanceEncrypted": {
              ".validate": "newData.isString()"
            },
            "availableBalance": {
              ".validate": "newData.isNumber()"
            },
            "availableBalanceEncrypted": {
              ".validate": "newData.isString()"
            },
            "userId": {
              ".validate": "newData.val() === auth.uid"
            },
            "lastUpdated": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            }
          }
        },
        "transactions": {
          "$transactionId": {
            ".validate": "newData.hasChildren(['transactionId', 'accountId', 'amount', 'date', 'name', 'userId'])",
            "transactionId": {
              ".validate": "newData.isString() && newData.val().length > 0"
            },
            "accountId": {
              ".validate": "newData.isString() && newData.val().length > 0"
            },
            "amount": {
              ".validate": "newData.isNumber()"
            },
            "amountEncrypted": {
              ".validate": "newData.isString()"
            },
            "date": {
              ".validate": "newData.isString() && newData.val().length > 0"
            },
            "name": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 200"
            },
            "nameEncrypted": {
              ".validate": "newData.isString()"
            },
            "category": {
              ".validate": "newData.isString()"
            },
            "categoryEncrypted": {
              ".validate": "newData.isString()"
            },
            "pending": {
              ".validate": "newData.isBoolean()"
            },
            "userId": {
              ".validate": "newData.val() === auth.uid"
            },
            "lastUpdated": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            }
          }
        },
        "status": {
          ".validate": "newData.hasChildren(['hasNewAccounts', 'newAccounts', 'expirationWarning', 'disconnectWarning', 'lastWebhook'])",
          "hasNewAccounts": {
            ".validate": "newData.isBoolean()"
          },
          "newAccounts": {
            ".validate": "newData.isString()"
          },
          "expirationWarning": {
            ".validate": "newData.isBoolean()"
          },
          "disconnectWarning": {
            ".validate": "newData.isBoolean()"
          },
          "lastWebhook": {
            ".validate": "newData.isNumber() && newData.val() > 0"
          }
        }
      }
    }
  }
}
